name: Build project

on: [push]

env:
  SAUCE_USERNAME: ${{secrets.SAUCE_USERNAME}}
  SAUCE_ACCESS_KEY: ${{secrets.SAUCE_ACCESS_KEY}}

jobs:

  testAllModes:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - PlayMode
          - EditMode
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v2
        id: tests
        env:
            UNITY_EMAIL: ${{ secrets.UNITY_USERNAME }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
            UNITY_SERIAL: ${{ secrets.UNITY_LICENSE_KEY }}
        with:
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.coveragePath }}     
      # Return License
      - name: Return license
        uses: game-ci/unity-return-license@v2
        if: always()

  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android # Build an Android .apk standalone app.
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - uses: game-ci/unity-builder@v2
        env:
            UNITY_EMAIL: ${{ secrets.UNITY_USERNAME }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
            UNITY_SERIAL: ${{ secrets.UNITY_LICENSE_KEY }}
        with:
          allowDirtyBuild: true
          targetPlatform: ${{ matrix.targetPlatform }}
      - uses: actions/upload-artifact@v2
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
      # Return License
      - name: Return license
        uses: game-ci/unity-return-license@v2
        if: always()

      # Upload Sauce Labs (appium übernimmt die Aufgabe)

      - name: ChangeDir
        run: cd build 

      - name: ZipAPK
        run: zip –u Android.zip Android.apk

      - name: Upload apk
        run: curl -u "${{secrets.SAUCE_USERNAME}}:${{secrets.SAUCE_ACCESS_KEY}}" --location
             --request POST 'https://api.eu-central-1.saucelabs.com/v1/storage/upload' 
             -F 'payload=${{ matrix.targetPlatform }}.zip' 
             -F 'name=${{ matrix.targetPlatform }}.zip'